#!/usr/bin/env python3
import os
import re
import resource
import sys
from argparse import ArgumentParser, ArgumentTypeError
from collections.abc import Iterator
from concurrent.futures import ThreadPoolExecutor
from configparser import ConfigParser
from dataclasses import dataclass
from io import BytesIO
from math import isnan
from pathlib import Path
from signal import Signals
from subprocess import (
    DEVNULL,
    PIPE,
    CalledProcessError,
    Popen,
    check_call,
    check_output,
    run,
)
from tempfile import NamedTemporaryFile
from time import time
from typing import Any
from urllib.error import HTTPError
from urllib.parse import quote_plus
from urllib.request import Request, urlopen
from zipfile import ZipFile

CACHE_DIR = Path.home() / ".cache" / "kattis-test"
SAMPLE_CACHE_DIR = CACHE_DIR / "samples"
CONTEST_CACHE_DIR = CACHE_DIR / "contests"

KATTIS_CFG = ConfigParser()
KATTIS_CFG.read(Path.home() / ".kattisrc")


class SamplesNotFoundError(Exception):
    pass


@dataclass
class InputFile:
    pass


@dataclass
class TempFile:
    name: str


@dataclass
class DebugArg:
    arg: str
    enable_on_debug: bool = True


@dataclass
class Sample:
    name: str
    input: Path
    output: Path | None


Arg = str | InputFile | TempFile | DebugArg


@dataclass
class CompilerInfo:
    compile: list[Arg] | None
    run: list[Arg]
    kattis: str | None
    mise_tool: str | None = None


def mise_bin_path(mise_tool: str) -> Path | None:
    try:
        path = Path(
            check_output(
                ["mise", "where", mise_tool],
                encoding="utf-8",
                stderr=DEVNULL,
            ).strip()
        )
        return path / "bin"
    except (CalledProcessError, FileNotFoundError):
        pass

    return None


def python_compiler(
    binary_name: str, version: str, mise_tool: str | None = None
) -> CompilerInfo:
    return CompilerInfo(
        compile=[binary_name, "-m", "py_compile", InputFile()],
        run=[binary_name, InputFile()],
        kattis=f"Python {version}",
        mise_tool=mise_tool,
    )


OCAML_TOOL = "ocaml@4.14.1"


COMPILERS = {
    "binary": lambda: CompilerInfo(compile=None, run=[InputFile()], kattis=None),
    "python2": lambda: python_compiler("python2", "2"),
    "python3": lambda: python_compiler("python3", "3"),
    "pypy2": lambda: python_compiler("pypy", "2", "python@pypy2.7-7.3.16"),
    "pypy3": lambda: python_compiler("pypy3", "3", "python@pypy3.10-7.3.16"),
    "ocaml": lambda: CompilerInfo(
        compile=None,
        run=["ocaml", "unix.cma", "str.cma", "bigarray.cma", InputFile()],
        kattis="OCaml",
        mise_tool=OCAML_TOOL,
    ),
    # Invokes OCaml's optimizing native code compiler instead of bytecode interpreter.
    # It produces intermediate .cmi, .cmx and .o files, which is annoying.
    "ocamlopt": lambda: CompilerInfo(
        compile=[
            "ocamlopt",
            "-g",
            "unix.cmxa",
            "str.cmxa",
            "bigarray.cmxa",
            InputFile(),
            "-o",
            TempFile("binary"),
        ],
        run=[TempFile("binary")],
        kattis="OCaml",
        mise_tool=OCAML_TOOL,
    ),
    "gcc": lambda: CompilerInfo(
        compile=[
            "gcc",
            "-Wall",
            "-g",
            "-O2",
            "-std=gnu23",
            DebugArg("-static", False),
            DebugArg("-fsanitize=undefined,address"),
            "-lm",
            InputFile(),
            "-o",
            TempFile("binary"),
        ],
        run=[TempFile("binary")],
        kattis="C",
    ),
    # If we really want to consistency then we could consider using:
    # $ docker run -it --rm -v $PWD/input.cpp:/input.cpp -v $PWD/output:/output gcc:14.2.0 g++ ... /input.cpp -o /output/output
    "g++": lambda: CompilerInfo(
        compile=[
            "g++",
            "-Wall",
            "-g",
            "-O2",
            "-std=gnu++23",
            DebugArg("-static", False),
            DebugArg("-lrt", False),
            DebugArg("-Wl,--whole-archive", False),
            "-lpthread",
            DebugArg("-Wl,--no-whole-archive", False),
            DebugArg("-fsanitize=undefined,address"),
            InputFile(),
            "-o",
            TempFile("binary"),
        ],
        run=[TempFile("binary")],
        kattis="C++",
    ),
    "rust": lambda: CompilerInfo(
        compile=[
            "rustup",
            "run",
            "1.83.0",
            "rustc",
            "-C",
            "opt-level=3",
            "-C",
            "target-cpu=native",
            "--crate-type",
            "bin",
            "--edition=2021",
            InputFile(),
            "-o",
            TempFile("binary"),
        ],
        run=[TempFile("binary")],
        kattis="Rust",
    ),
    "php": lambda: CompilerInfo(
        compile=[
            "php",
            "-n",
            "-d",
            "display_errors=stderr",
            "-d",
            "html_errors=0",
            "-l",
            InputFile(),
        ],
        run=[
            "php",
            "-n",
            "-d",
            "display_errors=stderr",
            "-d",
            "html_errors=0",
            InputFile(),
        ],
        kattis="PHP",
        mise_tool="php@8.3.6",
    ),
    "perl": lambda: CompilerInfo(
        compile=["perl", "-c", InputFile()],
        run=[
            "perl",
            InputFile(),
        ],
        kattis="Perl",
        mise_tool="perl@5.38.2",
    ),
    "prolog": lambda: CompilerInfo(
        compile=[
            "swipl",
            "-O",
            "-q",
            "-g",
            "main",
            "-t",
            "halt",
            "-o",
            TempFile("binary"),
            "-c",
            InputFile(),
        ],
        run=[TempFile("binary")],
        kattis="Prolog",
        mise_tool="swiprolog@9.0.4",
    ),
}


DEFAULT_COMPILERS = {
    ".c": "gcc",
    ".cpp": "g++",
    ".ml": "ocaml",
    ".rs": "rust",
    ".php": "php",
    ".pl": "prolog",
}


def get_sample_dir(problem_id: str) -> Path:
    return SAMPLE_CACHE_DIR / problem_id


def get_samples(sample_dir: Path) -> Iterator[Sample]:
    for in_p in sorted(sample_dir.glob("*.in*")):
        index, description = in_p.name.split(".in", maxsplit=1)
        if description == "" or description[0] == ".":
            out_p = in_p.parent / in_p.name.replace(".in", ".ans", 1)
            if not out_p.exists():
                out_p = in_p.parent / in_p.name.replace(".in", ".out", 1)

            assert out_p.exists()

            yield Sample(index, in_p, out_p)


def retrieve_url(url: str) -> bytes:
    # Kattis blocks the default Python-urllib/x.y user-agent
    req = Request(
        url,
        headers={"user-agent": "kattis-test"},
    )
    with urlopen(req) as r:
        return r.read()


def get_samples_url(problem_id: str) -> str:
    hostname = KATTIS_CFG.get("kattis", "hostname", fallback="open.kattis.com")
    return f"https://{hostname}/problems/{problem_id}/file/statement/samples.zip"


def download_samples(problem_id: str, sample_dir: Path) -> None:
    url = get_samples_url(problem_id)
    try:
        response = retrieve_url(url)
    except HTTPError:
        raise SamplesNotFoundError()

    with ZipFile(BytesIO(response)) as z:
        z.extractall(sample_dir)


def print_stderr_line(line: str) -> None:
    print(f"STDERR: {line}", end="")


def print_stderr(stderr: str) -> None:
    for line in stderr.splitlines(keepends=True):
        print_stderr_line(line)


@dataclass
class RunResult:
    exit_code: int
    stdout: str
    stderr: str


class Compiler:
    STACK_LIMIT_CHANGED = False

    def __init__(
        self,
        input_file: str,
        compile_cmd: list[Arg] | None,
        run_cmd: list[Arg],
        mise_tool: str | None,
        debug: bool,
        compile_flags: list[str],
    ) -> None:
        self.input_file = str(Path(input_file).absolute())
        self.compile_cmd = compile_cmd
        self.run_cmd = run_cmd
        self.debug = debug
        self.compile_flags = compile_flags

        self.bin_path = None
        if mise_tool is not None:
            self.bin_path = mise_bin_path(mise_tool)
            if self.bin_path is None:
                print(
                    f"WARNING: mise plugin {mise_tool} not found.",
                    file=sys.stderr,
                )
                print(
                    "  The compiler version used might differ from kattis'.",
                    file=sys.stderr,
                )

    def __enter__(self) -> "Compiler":
        self.tempfiles = {}
        for arg in (self.compile_cmd or []) + self.run_cmd:
            if isinstance(arg, TempFile):
                if arg.name not in self.tempfiles:
                    self.tempfiles[arg.name] = NamedTemporaryFile(delete=False).name

        return self

    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None:
        for fname in self.tempfiles.values():
            os.remove(fname)

    def transform_arg(self, arg: Arg) -> list[str]:
        if isinstance(arg, DebugArg):
            if self.debug == arg.enable_on_debug:
                return self.transform_arg(arg.arg)
            else:
                return []

        if isinstance(arg, InputFile):
            return [self.input_file]

        if isinstance(arg, TempFile):
            return [self.tempfiles[arg.name]]

        return [arg]

    def binary_path(self, binary: str) -> Path:
        if self.bin_path is None:
            return Path(binary)

        return self.bin_path / binary

    def transform_cmd(self, cmd: list[Arg]) -> list[str]:
        binary, *args = (a for arg in cmd for a in self.transform_arg(arg))
        return [str(self.binary_path(binary)), *args]

    def compile(self) -> None:
        if self.compile_cmd:
            check_call(self.transform_cmd(self.compile_cmd) + self.compile_flags)

    @classmethod
    def _ensure_stack_limit(cls) -> None:
        if not cls.STACK_LIMIT_CHANGED:
            resource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY,) * 2)
            cls.STACK_LIMIT_CHANGED = True

    @classmethod
    def _show_output(cls, p, fname) -> str:
        in_f = getattr(p, fname)
        r = ""
        for line in iter(in_f.readline, ""):
            r += line
            if fname == "stdout":
                print(line, end="")
            else:
                print_stderr_line(line)

        return r

    def run(self, stdin_file: Path, show_output: bool, show_stderr: bool) -> RunResult:
        self._ensure_stack_limit()
        with open(stdin_file) as stdin:
            p = Popen(
                self.transform_cmd(self.run_cmd),
                stdin=stdin,
                stdout=PIPE,
                stderr=PIPE,
                encoding="utf-8",
            )

        if show_output:
            print("\nOutput:")
            with ThreadPoolExecutor() as executor:
                fnames = ["stdout"]
                if show_stderr:
                    fnames.append("stderr")

                ts = [executor.submit(self._show_output, p, k) for k in fnames]
                p.wait()

                stdout = ts[0].result()
                if show_stderr:
                    stderr = ts[1].result()
                else:
                    stderr = ""
        else:
            stdout, stderr = p.communicate()

        return RunResult(exit_code=p.returncode, stdout=stdout, stderr=stderr)


def normalize_output(s: str) -> str:
    return "\n".join([line.strip() for line in s.strip().split("\n")])


def get_float_diff(s1: str, s2: str) -> tuple[float, float] | None:
    reld = 0
    absd = 0

    ls1 = s1.split("\n")
    ls2 = s2.split("\n")
    if len(ls1) != len(ls2):
        return None

    for l1, l2 in zip(ls1, ls2):
        vs1 = l1.split()
        vs2 = l2.split()
        if len(vs1) != len(vs2):
            return None

        for v1, v2 in zip(vs1, vs2):
            if v1 == v2:
                continue

            try:
                f1 = float(v1)
                f2 = float(v2)
                if isnan(f1):
                    return None
                d = abs(f1 - f2)
                absd = max(absd, d)
                try:
                    reld = max(reld, d / abs(f2))
                except ZeroDivisionError:
                    pass
                continue
            except ValueError:
                pass

            return None

    # Everything, but float matches perfectly
    return (absd, reld)


def print_diff(output: str, expected_output: str) -> None:
    with (
        NamedTemporaryFile("w", prefix="output.", suffix=".out") as f1,
        NamedTemporaryFile("w", prefix="expected.", suffix=".out") as f2,
    ):
        print(output, file=f1, flush=True)
        print(expected_output, file=f2, flush=True)
        run(["diff", "--color=always", "--side-by-side", f1.name, f2.name])


def compare_outputs(
    output: str, expected_output: str, time_str: str, diff: bool
) -> bool:
    if output == expected_output:
        print(f"Success ({time_str})")
        return True

    fd = get_float_diff(output, expected_output)
    if fd:
        absd, reld = fd
        if absd < 1.0:
            if absd == 0.0 and reld == 0.0:
                print(f"Ok with no float error ({time_str})")
            else:
                print(f"Ok with float error ({time_str}):")
                print(f"  {absd:e} absolute")
                print(f"  {reld:e} relative")
                print(f"  {min(absd, reld):e} min")

            return True

    if diff:
        print(f"Wrong output ({time_str}), diff:")
        print_diff(output, expected_output)
    else:
        print(f"Wrong output ({time_str}), got:")
        print(output)
        print("Expected:")
        print(expected_output)

    return False


def get_problems_url(contest_url: str) -> str | None:
    paths = ["/standings", "/problems", "/help", "/submit"]

    if contest_url:
        for path in paths:
            if contest_url.endswith(path):
                contest_url = contest_url[: -len(path)]
                break

        if contest_url[-1] != "/":
            contest_url += "/"

        return contest_url + "problems"

    submission_url = KATTIS_CFG.get("kattis", "submissionurl", fallback=None)
    if not submission_url:
        return None
    return submission_url.replace("/submit", "/problems")


PROBLEM_ID_RE = re.compile(r'<a href="[^"]*/problems/([^"]+)"')


def get_contest_problem_id(problem_letter: str, contest_url: str) -> str | None:
    problems_url = get_problems_url(contest_url)
    if problems_url is None:
        return None

    contest_dir = CONTEST_CACHE_DIR / quote_plus(problems_url)
    problem_ids_path = contest_dir / "problem_ids.txt"

    try:
        with problem_ids_path.open() as f:
            problem_ids = f.read().strip().splitlines()
    except FileNotFoundError:
        try:
            print("Downloading contest problems page...")
            response = retrieve_url(problems_url)
        except HTTPError:
            return None

        response = str(response, "utf-8")

        if "<th>A</th>" not in response:
            return None

        problem_ids = []
        for line in response.splitlines():
            m = PROBLEM_ID_RE.search(line)
            if not m:
                continue

            problem_ids.append(m.group(1))

        contest_dir.mkdir(parents=True, exist_ok=True)
        with problem_ids_path.open("w") as f:
            f.write("\n".join(problem_ids) + "\n")

    i = ord(problem_letter) - ord("A")
    if 0 <= i < len(problem_ids):
        return problem_ids[i]

    return None


def guess_problem_id(path: Path, contest_url: str) -> str | None:
    m = re.search(r"^[a-z0-9]+", path.stem)
    if m:
        return m.group()

    problem_letter = path.stem[:1]

    if problem_letter and problem_letter.isupper():
        problem_id = get_contest_problem_id(problem_letter, contest_url)
        if problem_id:
            print(f"Using contest problem id: {problem_id}")
        return problem_id

    return None


def guess_python_version(path: Path) -> int:
    python2_re = re.compile(r"^\s*\bprint\b *[^ \(\),\]]|\braw_input\b|\bxrange\b")

    first = True
    with path.open() as f:
        for line in f:
            if first and line.startswith("#!"):
                if line.find("python2") != -1:
                    return 2
                if line.find("python3") != -1:
                    return 3

            if python2_re.search(line):
                return 2

    return 3


def guess_language(path: Path) -> str | None:
    ext = path.suffix
    if ext == ".py":
        return "pypy" + str(guess_python_version(path))
    elif ext in DEFAULT_COMPILERS:
        return DEFAULT_COMPILERS[ext]
    elif os.access(path, os.X_OK):
        return "binary"

    return None


def file_path(filename: str) -> Path:
    if filename == "-":
        return Path("/dev/stdin")
    path = Path(filename)
    if not path.is_file():
        raise ArgumentTypeError(f"{filename} is not a file")
    return path


def dir_path(filename: str) -> Path:
    path = Path(filename)
    if not path.is_dir():
        raise ArgumentTypeError(f"{filename} is not a directory")
    return path


def main() -> int:
    parser = ArgumentParser(description="Test program on kattis sample inputs")

    sample_group = parser.add_mutually_exclusive_group()
    sample_group.add_argument(
        "--sample-file",
        dest="sample_file",
        type=file_path,
        help="use sample file instead of downloading from open kattis",
    )
    sample_group.add_argument(
        "--run",
        dest="sample_file",
        action="store_const",
        const=Path("/dev/stdin"),
        help="just run program without checking sample inputs and outputs",
    )
    sample_group.add_argument(
        "-d",
        "--directory",
        dest="dir",
        type=dir_path,
        help="use samples from directory instead of downloading from open kattis",
    )

    parser.add_argument(
        "-p", "--problem-id", dest="problem_id", help="set the problem id"
    )
    parser.add_argument(
        "-l",
        "--language",
        dest="lang",
        choices=COMPILERS.keys(),
        help="specify language",
    )
    parser.add_argument(
        "-s",
        "--submit",
        dest="submit",
        action="store_true",
        help="submit file to kattis if all tests succeeds, using `kattis` cli",
    )
    parser.add_argument(
        "-f",
        "--force",
        dest="force",
        action="store_true",
        help="submit even if some tests fails",
    )
    parser.add_argument(
        "--show-output",
        dest="show_output",
        action="store_true",
        help="show output of runs even when they succeed",
    )
    parser.add_argument(
        "--no-stderr",
        dest="no_stderr",
        action="store_true",
        help="don't show stderr output of program",
    )
    parser.add_argument(
        "--debug",
        dest="debug",
        action="store_true",
        help="compile/run with debug flags",
    )
    parser.add_argument(
        "--failfast",
        dest="failfast",
        action="store_true",
        help="stop running on first failed sample",
    )
    parser.add_argument(
        "--diff", dest="diff", action="store_true", help="show output diffs"
    )
    parser.add_argument(
        "--contest-url",
        dest="contest_url",
        help="specify contest url for mapping problem letters to problem ids",
    )
    parser.add_argument(
        "--sample-index",
        dest="sample_index",
        type=int,
        help="only use sample with specific index (one-indexed)",
    )
    parser.add_argument(
        "-D",
        "--define",
        dest="defines",
        action="append",
        default=[],
        help="define a C++ macro",
    )
    parser.add_argument("file", type=file_path)

    args = parser.parse_args()

    problem_id = args.problem_id or guess_problem_id(args.file, args.contest_url)
    if not problem_id:
        print("Couldn't guess problem id from filename", file=sys.stderr)
        return 1

    language = args.lang or guess_language(args.file)

    if not language:
        print(f"I don't know how to compile/run {args.file}", file=sys.stderr)
        return 1

    compiler = COMPILERS[language]()

    if args.sample_file:
        samples = [Sample(args.sample_file.name, args.sample_file, None)]
        args.show_output = True
    else:
        if args.dir:
            sample_dir = args.dir
        else:
            sample_dir = get_sample_dir(problem_id)
            if not sample_dir.exists():
                sample_dir.mkdir(parents=True)
                got_exception = True
                try:
                    print("Retrieving samples...")
                    download_samples(problem_id, sample_dir)
                    got_exception = False
                except SamplesNotFoundError:
                    print(
                        f"Could not find samples for problem {problem_id} on kattis",
                        file=sys.stderr,
                    )
                    if not args.submit:
                        return 1

                    if input("Submit anyway? [yN]: ").lower() != "y":
                        return 1
                finally:
                    if got_exception:
                        sample_dir.rmdir()

        samples = get_samples(sample_dir)

    if args.sample_index is not None:
        samples = list(samples)

        if not 1 <= args.sample_index <= len(samples):
            print(
                f"Sample with index {args.sample_index} not found, only {len(samples)} samples exists.",
                file=sys.stderr,
            )
            return 1

        samples = [samples[args.sample_index - 1]]

    compile_flags = []
    compile_flags += [f"-D{d}" for d in args.defines]

    all_correct = True
    with Compiler(
        args.file,
        compiler.compile,
        compiler.run,
        compiler.mise_tool,
        args.debug,
        compile_flags,
    ) as c:
        print("Compiling...")
        c.compile()

        print("Running program...")
        for sample in samples:
            print(f"Sample {sample.name}: ", end="")
            if not all_correct and args.failfast:
                print("Skipped")
                continue

            start_time = time()
            result = c.run(
                sample.input, args.show_output, show_stderr=not args.no_stderr
            )
            total_time = time() - start_time
            time_str = f"{total_time:.2f}s"

            if result.stderr and not args.show_output and not args.no_stderr:
                print()
                print_stderr(result.stderr)

            if result.exit_code != 0:
                if result.exit_code < 0:
                    s = -result.exit_code
                    try:
                        name = Signals(s).name
                    except ValueError:
                        name = "unknown"

                    print(f"Program exited with signal {s} ({name}) ({time_str})")
                else:
                    print(f"Program exited with code {result.exit_code} ({time_str})")

                all_correct = False
                continue

            if sample.output:
                output = normalize_output(result.stdout)
                with open(sample.output) as f:
                    expected_output = normalize_output(f.read())

                success = compare_outputs(output, expected_output, time_str, args.diff)
                all_correct &= success
            elif not args.show_output:
                print(f"Output ({time_str}):")
                print(result.stdout)
            else:
                print()
                print(f"Time: {time_str}")

    if not all_correct and not args.force:
        return 1

    if args.submit:
        kattis_language = compiler.kattis
        if not kattis_language:
            print(f"Can't submit {language} file to kattis", file=sys.stderr)

            return 1

        else:
            p = run(
                [
                    "kattis",
                    args.file,
                    "--language",
                    kattis_language,
                    "--problem",
                    problem_id,
                ],
                input=b"y\n",
            )
            return p.returncode

    return 0


if __name__ == "__main__":
    sys.exit(main())
